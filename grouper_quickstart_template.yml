apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: grouper-quickstart-template
message: |-
  The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.

         Username: ${POSTGRESQL_USER}
         Password: ${POSTGRESQL_PASSWORD}
    Database Name: ${POSTGRESQL_DATABASE}
   Connection URL: postgresql://${DATABASE_SERVICE_NAME}:5432/

  For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/.
metadata:
  annotations:
    description: Nope
    iconClass: icon-postgresql
    openshift.io/display-name: Grouper Quickstart
    openshift.io/documentation-url: Nope
    openshift.io/long-description: Nope
    openshift.io/provider-display-name: Nope
    openshift.io/support-url: Nope
    samples.operator.openshift.io/version: 4.14.3
    tags: grouper
  creationTimestamp: "2023-11-09T16:41:01Z"
  labels:
    samples.operator.openshift.io/managed: "true"
  name: grouper-quickstart-template
  namespace: openshift
  resourceVersion: "20773636"
  uid: 8ea8786e-384a-403f-b823-46853457204a
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
      template.openshift.io/groupersystem-quickstart-pass: '{.data[''groupersystem-quickstart-pass'']}'
      template.openshift.io/groupersystem-quickstart-user: '{.data[''groupersystem-quickstart-user'']}'
    name: ${DATABASE_SERVICE_NAME}
  stringData:
    database-name: ${POSTGRESQL_DATABASE}
    database-password: ${POSTGRESQL_PASSWORD}
    database-user: ${POSTGRESQL_USER}
    groupersystem-quickstart-pass: ${GROUPERSYSTEM_QUICKSTART_PASS}
    groupersystem-quickstart-user: 'GrouperSystem'
    grouper-morphstring-encrypt-key: ${GROUPER_MORPHSTRING_ENCRYPT_KEY}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    name: ${DATABASE_SERVICE_NAME}
  spec:
    ports:
    - name: postgresql
      nodePort: 0
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: ${DATABASE_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: "http://{.spec.host}{.spec.path}"
    name: grouper-ui
  spec:
    path: grouper
    ports:
    - name: grouper-app
      nodePort: 0
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      name: grouper-app
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${DATABASE_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${DATABASE_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${DATABASE_SERVICE_NAME}
      spec:
        containers:
        - name: postgresql
          image: 'postgresql:${POSTGRESQL_VERSION}'
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${DATABASE_SERVICE_NAME}
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${DATABASE_SERVICE_NAME}
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${DATABASE_SERVICE_NAME}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /usr/libexec/check-container
              - --live
            initialDelaySeconds: 120
            timeoutSeconds: 10
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: ${DATABASE_SERVICE_NAME}-data
        - name: grouper-app
          image: docker.io/i2incommon/grouper:5.6.0
          imagePullPolicy: IfNotPresent
          args:
            - quickstart
          env:
            - name: GROUPER_MORPHSTRING_ENCRYPT_KEY
              valueFrom:
              secretKeyRef:
                key: grouper-morphstring-encrypt-key
                name: ${DATABASE_SERVICE_NAME}
            - name: GROUPER_DATABASE_URL
              value: 'jdbc:postgresql://172.30.2.68:5432/grouper?currentSchema=public'
            - name: GROUPER_DATABASE_USERNAME
              valueFrom:
              secretKeyRef:
                key: database-user
                name: ${DATABASE_SERVICE_NAME}
            - name: GROUPER_DATABASE_PASSWORD
              valueFrom:
              secretKeyRef:
                key: database-password
                name: ${DATABASE_SERVICE_NAME}
            - name: GROUPERSYSTEM_QUICKSTART_PASS
              valueFrom:
              secretKeyRef:
                key: groupersystem-quickstart-pass
                name: ${DATABASE_SERVICE_NAME}
            - name: GROUPER_RUN_APACHE
              value: 'true'
            - name: GROUPER_RUN_TOMCAT
              value: 'true'
            - name: GROUPER_RUN_TOMEE
              value: 'true'
            - name: GROUPER_OPENSHIFT
              value: 'true'
          ports:
            - containerPort: 8080
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - '-c'
                - curl --fail http://$(cat/etc/hostname):8080/grouper/status?diagnosticType=sources
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: ${DATABASE_SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${DATABASE_SERVICE_NAME}
  status: {}
parameters:
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  value: grouper
  required: true
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: postgresql
- description: Username for PostgreSQL user that will be used for accessing the database.
  displayName: PostgreSQL Connection Username
  name: POSTGRESQL_USER
  value: grouper
  required: true
- description: Password for the PostgreSQL connection user.
  displayName: PostgreSQL Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: POSTGRESQL_PASSWORD
  required: true
- description: Name of the PostgreSQL database accessed.
  displayName: PostgreSQL Database Name
  name: POSTGRESQL_DATABASE
  required: true
  value: grouper
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 10Gi
- description: Version of PostgreSQL image to be used (10-el7, 10-el8, or latest).
  displayName: Version of PostgreSQL Image
  name: POSTGRESQL_VERSION
  required: true
  value: 10-el8
- description: Grouper morphstring encrypt key
  displayName: Grouper morphstring encrypt key
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: GROUPER_MORPHSTRING_ENCRYPT_KEY
  required: true
- description: Initial password for GrouperSystem user
  displayName: Grouper quickstart password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: GROUPERSYSTEM_QUICKSTART_PASS
  required: true
